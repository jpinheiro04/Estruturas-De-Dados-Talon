Recursividade 

#include <iostream>
using namespace std;

// Função recursiva para calcular a somatória de 1 até N
int somatoria(int n) {
    if (n == 1) {               // Condição de parada
        return 1;               // Quando N for 1, a função retorna 1 e para a recursão
    } else {                    
        return n + somatoria(n - 1);  // Chamada recursiva: adiciona N à somatória de (N-1)
    }
}

int main() {
    int n;
    cout << "Digite um número N: ";  // Pede ao usuário para inserir um número
    cin >> n;                        // Lê o valor de N do teclado

    // Chama a função recursiva e exibe o resultado
    cout << "A somatória de 1 até " << n << " é: " << somatoria(n) << endl;

    return 0;
}
------------------------------------------------------------------------------------------------------------------------
Recursividade 

#include <iostream>
using namespace std;

// Função para imprimir o movimento de um disco
void moveDisco(char origem, char destino) {
    cout << origem << " -> " << destino << endl;
}

// Função recursiva para resolver o problema da Torre de Hanói
void torreHanoi(int altura, char origem, char destino, char trabalho) {
    if (altura == 1) {  // Caso base: quando resta apenas um disco
        moveDisco(origem, destino);  // Move o disco do pino origem para o pino destino
    } else {
        // Move a torre de altura-1 discos da origem para o pino trabalho, usando o pino destino como auxiliar
        torreHanoi(altura - 1, origem, trabalho, destino);
        
        // Move o disco maior da origem para o pino destino
        moveDisco(origem, destino);
        
        // Move a torre de altura-1 discos do pino trabalho para o pino destino, usando o pino origem como auxiliar
        torreHanoi(altura - 1, trabalho, destino, origem);
    }
}

int main() {
    int n;
    cout << "Digite N: ";  // Pede ao usuário o número de discos
    cin >> n;

    // Chama a função torreHanoi para mover N discos do pino A para o pino B, usando o pino C como pino de trabalho
    torreHanoi(n, 'A', 'B', 'C');
    
    return 0;
}
------------------------------------------------------------------------------------------------------------------------
Complexidade

• A complexidade temporal, que é aproximadamente o número de
instruções (tempo) que ele executa.

• A complexidade espacial, que é a quantidade de memória que ele utiliza
durante sua execução.
------------------------------------------------------------------------------------------------------------------------
Complexidade

Big-O (O): Dá o limite superior da complexidade de um algoritmo, ou seja, o tempo máximo que ele pode levar no pior caso.
Big-Theta (Θ): Dá a complexidade exata de um algoritmo, que descreve o seu comportamento no caso médio.
Big-Omega (Ω): Dá o limite inferior, ou seja, o tempo mínimo que um algoritmo pode levar no melhor caso.

Pesquisa Linear (Linear Search):

O(n): No pior caso, temos que procurar todos os elementos da lista.
Θ(n): Para a maioria dos casos, o tempo de execução será linear.
Ω(1): No melhor caso, o elemento pode ser encontrado na primeira posição.

Pesquisa Binária (Binary Search):

O(log n): No pior caso, temos que dividir a lista várias vezes para encontrar o elemento.
Θ(log n): Em média, a pesquisa binária terá uma complexidade logarítmica.
Ω(1): No melhor caso, o elemento pode ser encontrado logo na primeira comparação.
------------------------------------------------------------------------------------------------------------------------
Ordenação


------------------------------------------------------------------------------------------------------------------------
Ordenação

void ordenaDecrescente(TVetor v, int n) {
    int i, j;
    TDado x;
    mostra(v, n);
    for (i = 1; i < n; i++) {
        for (j = n - 1; j >= i; j--) {
            // Troca se o elemento da esquerda for menor que o da direita
            if (v[j - 1].chave < v[j].chave) {
                x = v[j - 1];
                v[j - 1] = v[j];
                v[j] = x;
            }
            mostra(v, n);
        }
    }
    mostra(v, n);
}
------------------------------------------------------------------------------------------------------------------------
Ordenação

void ordenaCrescente(TVetor v, int n) {
    int i, j;               // Declara duas variáveis inteiras para os loops
    TDado x;                // Declara uma variável do tipo TDado para armazenar temporariamente um valor durante a troca
    mostra(v, n);           // Chama a função 'mostra' para exibir o vetor antes de começar a ordenação

    for (i = 1; i < n; i++) {    // Loop externo que percorre o vetor da posição 1 até a última
        for (j = n - 1; j >= i; j--) {    // Loop interno que percorre o vetor da direita para a esquerda, comparando pares vizinhos
            // Se o valor na posição anterior (v[j-1]) for maior que o atual (v[j]), ocorre a troca
            if (v[j - 1].chave > v[j].chave) { 
                x = v[j - 1];     // Armazena o valor de v[j-1] na variável temporária 'x'
                v[j - 1] = v[j];  // Atribui o valor de v[j] para a posição v[j-1]
                v[j] = x;         // Coloca o valor de 'x' (antigo v[j-1]) na posição v[j]
            }
            mostra(v, n);         // Exibe o vetor após cada troca para acompanhar o processo de ordenação
        }
    }
    mostra(v, n);                 // Exibe o vetor final já ordenado
}

------------------------------------------------------------------------------------------------------------------------
Busca Linear (Simples)

int busca(TChave x, TVetor v, int n) {
    int i = 0;
    while ((i < n) && (v[i].chave != x)) {
        i++;
    }
    return i;
}

------------------------------------------------------------------------------------------------------------------------
Busca Linear com Sentinela

int busca(TChave x, TVetor v, int n) {
    int i = 0;
    v[n].chave = x;  // Sentinela
    while (v[i].chave != x) {
        i++;
    }
    return i;
}
------------------------------------------------------------------------------------------------------------------------
Busca Linear com Dados Ordenados (Sem Sentinela)

int busca(TChave x, TVetor v, int n) {
    int i = 0;
    while ((i < n) && (v[i].chave < x)) {
        i++;
    }
    return (((i < n) && (v[i].chave == x)) ? i : n);
}
------------------------------------------------------------------------------------------------------------------------
Busca Linear com Dados Ordenados (Com Sentinela)

int busca(TChave x, TVetor v, int n) {
    int i = 0;
    v[n].chave = x;  // Sentinela
    while (v[i].chave < x) {
        i++;
    }
    return ((v[i].chave == x) ? i : n);
}
------------------------------------------------------------------------------------------------------------------------
Busca Binária

int busca(TChave x, TVetor v, int n) {
    int esq = 0, dir = n - 1;
    while (esq <= dir) {
        int meio = (esq + dir) / 2;
        if (v[meio].chave < x) {
            esq = meio + 1;
        } else if (v[meio].chave > x) {
            dir = meio - 1;
        } else {
            return meio;
        }
    }
    return n;
}
------------------------------------------------------------------------------------------------------------------------
Busca Linear (Simples e Ordenada):

Melhor caso: O(1)
Pior caso: O(n)
Média: O(n)

Busca Linear com Sentinela (Simples e Ordenada):

Melhor caso: O(1)
Pior caso: O(n)
Média: O(n)

Busca Binária:

Melhor caso: O(1)
Pior caso: O(log n)
Média: O(log n)
A busca binária é muito mais eficiente em dados ordenados devido à sua complexidade logarítmica, 
enquanto as buscas lineares são menos eficientes, especialmente em vetores grandes.
------------------------------------------------------------------------------------------------------------------------
Pilha

int retiraPilha(TPilha *p, int qual, TInfo *var) {
    if (qual == 1) {  // Operar sobre a pilha 1
        if (p->topo1 == 0) {  // Verifica se a pilha 1 está vazia
            return 0;  // Não é possível retirar, pilha vazia
        } else {
            *var = p->elem[p->topo1-1];  // Armazena o valor retirado
            p->topo1 = p->topo1 - 1;  // Atualiza o topo da pilha 1
            return 1;  // Sucesso na remoção
        }
    } else {  // Operar sobre a pilha 2
        if (p->topo2 == MAX + 1) {  // Verifica se a pilha 2 está vazia
            return 0;  // Não é possível retirar, pilha vazia
        } else {
            *var = p->elem[p->topo2];  // Armazena o valor retirado
            p->topo2 = p->topo2 + 1;  // Atualiza o topo da pilha 2
            return 1;  // Sucesso na remoção
        }
    }
}
------------------------------------------------------------------------------------------------------------------------
Fila 

#include <iostream>
using namespace std;

#define MAXELEM 5
typedef int TInfo;

// Estrutura da fila
typedef struct TFila {
    TInfo elem[MAXELEM];  // Vetor que armazena os elementos da fila
    int fim;              // Índice do fim da fila
} TFila;

// Inicializa a fila
void iniciaFila(TFila *f) {
    f->fim = 0;  // A fila começa vazia, então o índice do fim é 0
}

// Insere um elemento na fila
int insereFila(TFila *f, TInfo var) {
    if (f->fim == MAXELEM) {  // Verifica se a fila está cheia
        return 0;             // Retorna 0 se a fila estiver cheia
    } else {
        f->elem[f->fim] = var;  // Adiciona o elemento no final da fila
        f->fim++;               // Incrementa o índice do fim
        return 1;               // Retorna 1 indicando sucesso
    }
}

// Remove um elemento da fila e faz o deslocamento dos elementos
int retiraFila(TFila *f, TInfo *var) {
    if (f->fim == 0) {  // Verifica se a fila está vazia
        return 0;       // Retorna 0 se a fila estiver vazia
    } else {
        *var = f->elem[0];  // Remove o primeiro elemento (no início da fila)

        // Desloca os elementos para a esquerda
        for (int i = 1; i < f->fim; i++) {
            f->elem[i-1] = f->elem[i];
        }

        f->fim--;  // Decrementa o índice do fim
        return 1;  // Retorna 1 indicando sucesso
    }
}

int main() {
    TFila fila;  // Declaração da fila
    TInfo v;     // Variável para armazenar o elemento retirado

    // Inicializa a fila
    iniciaFila(&fila);

    // Insere alguns elementos na fila
    if (insereFila(&fila, 10)) cout << "Valor inserido: 10" << endl;
    if (insereFila(&fila, 20)) cout << "Valor inserido: 20" << endl;
    if (insereFila(&fila, 30)) cout << "Valor inserido: 30" << endl;

    // Remove o primeiro elemento
    if (retiraFila(&fila, &v)) cout << "Valor retirado: " << v << endl;

    // Remove o próximo elemento
    if (retiraFila(&fila, &v)) cout << "Valor retirado: " << v << endl;

    // Insere mais elementos
    if (insereFila(&fila, 40)) cout << "Valor inserido: 40" << endl;
    if (insereFila(&fila, 50)) cout << "Valor inserido: 50" << endl;

    // Remove outro elemento
    if (retiraFila(&fila, &v)) cout << "Valor retirado: " << v << endl;

    return 0;
}

------------------------------------------------------------------------------------------------------------------------
Fila

int retiraFila(TFila *f, TInfo *var) {
    if (f->quantidade == 0) {  // Verifica se a fila está vazia (UNDERFLOW)
        return 0;  // Retorna 0 indicando que a fila está vazia
    } else {
        *var = f->elem[f->inicio - 1];  // Remove o elemento na posição 'início'
        f->inicio = (f->inicio % MAXELEM) + 1;  // Atualiza o índice do início para o próximo
        f->quantidade--;  // Decrementa a quantidade de elementos na fila
        return 1;  // Retorna 1 indicando sucesso na remoção
    }
}
------------------------------------------------------------------------------------------------------------------------
